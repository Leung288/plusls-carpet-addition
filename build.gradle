plugins {
    id("maven-publish")
    id("fabric-loom").version("1.1-SNAPSHOT").apply(false)
    // https://github.com/Juuxel/LoomQuiltflower
    id("io.github.juuxel.loom-quiltflower").version("1.8.0").apply(false)
    id("net.kyori.blossom").version("1.3.1").apply(false)
    id("org.ajoberstar.grgit").version("5.0.0")
    id("com.replaymod.preprocess").version("SNAPSHOT")
}

preprocess {
    def mc1144 = createNode("1.14.4", 1_14_04, "mojang")
    def mc1152 = createNode("1.15.2", 1_15_02, "mojang")
    def mc1165 = createNode("1.16.5", 1_16_05, "mojang")
    def mc1171 = createNode("1.17.1", 1_17_01, "mojang")
    def mc1182 = createNode("1.18.2", 1_18_02, "mojang")
    def mc1192 = createNode("1.19.2", 1_19_02, "mojang") // root
    def mc1193 = createNode("1.19.3", 1_19_03, "mojang") // root

    mc1144.link(mc1152, null)
    mc1152.link(mc1165, null)
    mc1165.link(mc1171, null)
    mc1171.link(mc1182, null)
    mc1182.link(mc1192, file("versions/mapping-1.18.2-1.19.2.txt"))
    mc1192.link(mc1193, null)
}

String getVersionGit(List paths) {
    if (grgit == null) {
        return "nogit"
    }
    List latestCommits = paths.isEmpty() ? grgit.log(maxCommits: 1) : grgit.log(paths: paths, maxCommits: 1)
    return latestCommits.isEmpty() ? "uncommited" : "${latestCommits.get(0).id.substring(0, 7)}"
}

String getVersionType() {
    Map<String, String> ENV = System.getenv()
    switch (ENV.BUILD_TYPE) {
        case "RELEASE":
            return "stable"
        case "BETA":
            return "beta"
        default:
            return "dev"
    }
}

int getVersionPatch(List paths) {
    if (grgit == null) {
        return 0
    }
    List latestCommits = paths.isEmpty() ? grgit.log() : grgit.log(paths: paths)
    return latestCommits.size()
}

setVersion("${project.mod_version}.${getVersionPatch([])}+${getVersionGit([])}-${getVersionType()}")
